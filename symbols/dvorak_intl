//  ~ ~   ! ¡   @ ª   # º   $ ¥   % ¢   ^ ˆ   & ˇ   * ×   ( ‘   ) ’   { “   } ”
//  ` `   1 ¹   2 ²   3 ³   4 £   5 €   6 ¼   7 ½   8 ¾   9 ˘   0 °   [ «   ] »
//
//        " ¨   < ≤   > ≥   P §   Y É   F F   G À   C Ç   R ©   L Ł   _ ¯   + ±
//        ' ´   , ˙   . ·   p ¶   y é   f f   g à   c ç   r ®   l ł   - –   = ≠
//
//        A Ä   O Ö   E Ë   U Ü   I Ï   D Ð   H H   T Þ   N Ñ   S ẞ   ? ¿   | …
//        a ä   o ö   e ë   u ü   i ï   d ð   h h   t þ   n ñ   s ß   / ÷   \ ¬
//
//  > ⟩   : Å   Q Ø   J Æ   K Œ   X È   B B   M λ   W W   V V   Z Z
//  < ⟨   ; å   q ø   j æ   k œ   x è   b b   m µ   w w   v v   z z

default partial alphanumeric_keys
xkb_symbols "altgr-intl" {
    name[Group1]= "Dvorak (international, with AltGr dead keys)";

    key <TLDE> { [        grave,   asciitilde,       dead_grave,       dead_tilde ] };

    key <AE01> { [            1,       exclam,      onesuperior,       exclamdown ] };
    key <AE02> { [            2,           at,      twosuperior,      ordfeminine ] };
    key <AE03> { [            3,   numbersign,    threesuperior,        masculine ] };
    key <AE04> { [            4,       dollar,         sterling,              yen ] };
    key <AE05> { [            5,      percent,         EuroSign,             cent ] };
    key <AE06> { [            6,  asciicircum,       onequarter,  dead_circumflex ] };
    key <AE07> { [            7,    ampersand,          onehalf,       dead_caron ] };
    key <AE08> { [            8,     asterisk,    threequarters,         multiply ] };
    key <AE09> { [            9,    parenleft,       dead_breve, leftsinglequotemark ] };
    key <AE10> { [            0,   parenright,           degree, rightsinglequotemark ] };
    key <AE11> { [  bracketleft,    braceleft,    guillemotleft, leftdoublequotemark ] };
    key <AE12> { [ bracketright,   braceright,   guillemotright, rightdoublequotemark ] };

    key <AD01> { [   apostrophe,     quotedbl,       dead_acute,   dead_diaeresis ] };
    key <AD02> { [        comma,         less,    dead_abovedot,    lessthanequal ] };
    key <AD03> { [       period,      greater,   periodcentered, greaterthanequal ] };
    key <AD04> { [            p,            P,        paragraph,          section ] };
    key <AD05> { [            y,            Y,           eacute,           Eacute ] };
    key <AD06> { [            f,            F ] };
    key <AD07> { [            g,            G,           agrave,           Agrave ] };
    key <AD08> { [            c,            C,         ccedilla,         Ccedilla ] };
    key <AD09> { [            r,            R,       registered,        copyright ] };
    key <AD10> { [            l,            L,          lstroke,          Lstroke ] };
    key <AD11> { [        minus,   underscore,           endash,      dead_macron ] };
    key <AD12> { [        equal,         plus,         notequal,        plusminus ] };

    key <AC01> { [            a,            A,       adiaeresis,       Adiaeresis ] };
    key <AC02> { [            o,            O,       odiaeresis,       Odiaeresis ] };
    key <AC03> { [            e,            E,       ediaeresis,       Ediaeresis ] };
    key <AC04> { [            u,            U,       udiaeresis,       Udiaeresis ] };
    key <AC05> { [            i,            I,       idiaeresis,       Idiaeresis ] };
    key <AC06> { [            d,            D,              eth,              ETH ] };
    key <AC07> { [            h,            H ] };
    key <AC08> { [            t,            T,            thorn,            THORN ] };
    key <AC09> { [            n,            N,           ntilde,           Ntilde ] };
    key <AC10> { [            s,            S,           ssharp,            U1E9E ] };
    key <AC11> { [        slash,     question,         division,     questiondown ] };

    key <AB01> { [    semicolon,        colon,            aring,            Aring ] };
    key <AB02> { [            q,            Q,           oslash,           Oslash ] };
    key <AB03> { [            j,            J,               ae,               AE ] };
    key <AB04> { [            k,            K,               oe,               OE ] };
    key <AB05> { [            x,            X,           egrave,           Egrave ] };
    key <AB06> { [            b,            B ] };
    key <AB07> { [            m,            M,               mu,      Greek_lamda ] };
    key <AB08> { [            w,            W ] };
    key <AB09> { [            v,            V ] };
    key <AB10> { [            z,            Z ] };

    key <BKSL> { [    backslash,          bar,          notsign,         ellipsis ] };
    key <LSGT> { [         less,      greater, leftanglebracket,rightanglebracket ] };

    key <SPCE> { [        space,        space,     nobreakspace,     nobreakspace ] };

    include "level3(ralt_switch)"
};


// Based on us(symbolic) by Daniele Baisero <daniele.baisero@gmail.com>
partial alphanumeric_keys
xkb_symbols "symbolic" {
    name[Group1]= "Dvorak (symbolic)";

    key <TLDE> { [        grave,   asciitilde,        backslash,              bar ] }; // ` ~ \ |

    key <AE01> { [            1,       exclam,      onesuperior,          notsign ] }; // 1 ! ¹ ¬
    key <AE02> { [            2,           at,      twosuperior,        therefore ] }; // 2 @ ² ∴
    key <AE03> { [            3,   numbersign,    threesuperior,         sterling ] }; // 3 # ³ £
    key <AE04> { [            4,       dollar,     foursuperior,         EuroSign ] }; // 4 $ ⁴ €
    key <AE05> { [            5,      percent,     fivesuperior,            U2030 ] }; // 5 % ⁵ ‰
    key <AE06> { [            6,  asciicircum,      sixsuperior,       squareroot ] }; // 6 ^ ⁶ √
    key <AE07> { [            7,    ampersand,    sevensuperior,          section ] }; // 7 & ⁷ §
    key <AE08> { [            8,     asterisk,    eightsuperior,         infinity ] }; // 8 * ⁸ ∞
    key <AE09> { [            9,    parenleft,     ninesuperior,   periodcentered ] }; // 9 ( ⁹ ·
    key <AE10> { [            0,   parenright,     zerosuperior,           degree ] }; // 0 ) ⁰ °
    key <AE11> { [  bracketleft,    braceleft,            union,     intersection ] }; // [ { ∪ ∩
    key <AE12> { [ bracketright,   braceright,       includedin,         includes ] }; // ] } ⊂ ⊃

    key <AD01> { [   apostrophe,     quotedbl,       rightarrow,        leftarrow ] }; // ' " → ←
    key <AD02> { [        comma,         less,    lessthanequal,    guillemotleft ] }; // , < ≤ «
    key <AD03> { [       period,      greater, greaterthanequal,   guillemotright ] }; // . > ≥ »
    key <AD04> { [            p,            P,         Greek_pi,         Greek_PI ] }; // p P π Π
    key <AD05> { [            y,            Y,    Greek_upsilon,    Greek_UPSILON ] }; // y Y υ Υ
    key <AD06> { [            f,            F,        Greek_phi,        Greek_PHI ] }; // f F φ Φ
    key <AD07> { [            g,            G,      Greek_gamma,      Greek_GAMMA ] }; // g G γ Γ
    key <AD08> { [            c,            C,        Greek_psi,        Greek_PSI ] }; // c C ψ Ψ
    key <AD09> { [            r,            R,        Greek_rho,        Greek_RHO ] }; // p P ρ Ρ
    key <AD10> { [            l,            L,      Greek_lamda,      Greek_LAMDA ] }; // l L λ Λ
    key <AD11> { [        minus,   underscore,         notequal,        plusminus ] }; // - _ ≠ ±
    key <AD12> { [        equal,         plus,         multiply,         division ] }; // = + × ÷

    key <AC01> { [            a,            A,      Greek_alpha,      Greek_ALPHA ] }; // a A α Α
    key <AC02> { [            o,            O,    Greek_omicron,    Greek_OMICRON ] }; // o O ο Ο
    key <AC03> { [            e,            E,    Greek_epsilon,    Greek_EPSILON ] }; // e E ε Ε
    key <AC04> { [            u,            U,      Greek_theta,      Greek_THETA ] }; // u U θ Θ
    key <AC05> { [            i,            I,       Greek_iota,       Greek_IOTA ] }; // i I ι Ι
    key <AC06> { [            d,            D,      Greek_delta,      Greek_DELTA ] }; // d D δ Δ
    key <AC07> { [            h,            H,        Greek_eta,        Greek_ETA ] }; // h H η Η
    key <AC08> { [            t,            T,        Greek_tau,        Greek_TAU ] }; // t T τ Τ
    key <AC09> { [            n,            N,         Greek_nu,         Greek_NU ] }; // n N ν Ν
    key <AC10> { [            s,            S,      Greek_sigma,      Greek_SIGMA ] }; // s S σ Σ
    key <AC11> { [        slash,     question,            U203D,            U2766 ] }; // / ? ‽ ❦

    key <AB01> { [    semicolon,        colon,        downarrow,          uparrow ] }; // ; : ↓ ↑
    key <AB02> { [            q,            Q,            U2200,            U2203 ] }; // q Q ∀ ∃
    key <AB03> { [            j,            J,         Greek_xi,         Greek_XI ] }; // j J ξ Ξ
    key <AB04> { [            k,            K,      Greek_kappa,      Greek_KAPPA ] }; // k K κ Κ
    key <AB05> { [            x,            X,        Greek_chi,        Greek_CHI ] }; // x X χ Χ
    key <AB06> { [            b,            B,       Greek_beta,       Greek_BETA ] }; // b B β Β
    key <AB07> { [            m,            M,         Greek_mu,         Greek_MU ] }; // m M μ Μ
    key <AB08> { [            w,            W,        elementof,     notelementof ] }; // w W ∈ ∉
    key <AB09> { [            v,            V,      Greek_omega,      Greek_OMEGA ] }; // v V ω Ω
    key <AB10> { [            z,            Z,       Greek_zeta,       Greek_ZETA ] }; // z Z ζ Ζ

    key <BKSL> { [    backslash,          bar,            grave,       asciitilde ] }; // \ | ` ~
    key <LSGT> { [        U230A,        U230B,            U2308,            U2309 ] }; // ⌊ ⌋ ⌈ ⌉

    include "level3(ralt_switch)"
};
